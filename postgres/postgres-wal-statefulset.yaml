# PostgreSQL StatefulSet with WAL Configuration for Debezium CDC
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-wal-config
  labels:
    app: postgres
data:
  postgresql.conf: |
    # Network Configuration
    listen_addresses = '*'
    
    # WAL Configuration for Debezium CDC
    wal_level = logical
    archive_mode = on
    archive_command = 'cp %p /var/lib/postgresql/archive/%f'
    max_wal_senders = 10
    max_replication_slots = 10
    wal_keep_size = 1GB
    wal_buffers = 16MB
    checkpoint_completion_target = 0.9
    max_wal_size = 2GB
    min_wal_size = 80MB
    log_checkpoints = on
    hot_standby = on

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-scripts
  labels:
    app: postgres
data:
  init_debezium.sql: |
    -- Debezium Setup for CDC across multiple databases
    -- This script creates the necessary user, permissions, and setup for Debezium CDC

    -- Create Debezium user with proper CDC permissions (not superuser)
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_user WHERE usename = 'debezium_user') THEN
            CREATE USER debezium_user WITH REPLICATION PASSWORD 'debezium_pass';
        END IF;
    END
    $$;

    -- Grant necessary system-level permissions for Debezium CDC
    -- These permissions allow Debezium to function without superuser privileges
    GRANT CONNECT ON DATABASE mydb TO debezium_user;
    GRANT USAGE ON SCHEMA public TO debezium_user;
    GRANT SELECT ON ALL TABLES IN SCHEMA public TO debezium_user;
    ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO debezium_user;

    -- Grant database creation permission for Debezium operations
    ALTER USER debezium_user CREATEDB;

    -- Create publication for Debezium in mydb (if not exists)
    DO $$
    BEGIN
        IF NOT EXISTS (SELECT 1 FROM pg_publication WHERE pubname = 'debezium_publication') THEN
            CREATE PUBLICATION debezium_publication FOR ALL TABLES;
        END IF;
    END
    $$;

    -- Note: Replication slots will be created by Debezium connectors as needed
    -- This allows for multiple databases and connectors to coexist

    -- Create function to setup Debezium permissions on any database
    -- This function can be called after creating new databases
    CREATE OR REPLACE FUNCTION setup_debezium_for_database(db_name TEXT) 
    RETURNS VOID AS $func$
    DECLARE
        sql_cmd TEXT;
    BEGIN
        -- Grant connect permission
        sql_cmd := format('GRANT CONNECT ON DATABASE %I TO debezium_user', db_name);
        EXECUTE sql_cmd;
        
        -- Note: USAGE and SELECT grants must be done within the target database context
        RAISE NOTICE 'Granted CONNECT on database % to debezium_user. Run setup_debezium_schema_permissions() within the database.', db_name;
    END;
    $func$ LANGUAGE plpgsql;

    -- Create function to setup schema-level permissions (to be run within target database)
    CREATE OR REPLACE FUNCTION setup_debezium_schema_permissions() 
    RETURNS VOID AS $func$
    BEGIN
        -- Grant schema usage
        GRANT USAGE ON SCHEMA public TO debezium_user;
        
        -- Grant select on all existing tables
        GRANT SELECT ON ALL TABLES IN SCHEMA public TO debezium_user;
        
        -- Grant select on all future tables
        ALTER DEFAULT PRIVILEGES IN SCHEMA public GRANT SELECT ON TABLES TO debezium_user;
        
        -- Create publication for this database if it doesn't exist
        IF NOT EXISTS (SELECT 1 FROM pg_publication WHERE pubname = 'debezium_publication') THEN
            CREATE PUBLICATION debezium_publication FOR ALL TABLES;
        END IF;
        
        -- Change publication owner to debezium_user for proper permissions
        ALTER PUBLICATION debezium_publication OWNER TO debezium_user;
        
        RAISE NOTICE 'Debezium permissions setup completed for current database';
    END;
    $func$ LANGUAGE plpgsql;

    -- Verify setup
    \echo '=== Debezium Setup Verification ==='
    SELECT 'WAL Level: ' || setting as verification FROM pg_settings WHERE name = 'wal_level';
    SELECT 'Debezium User: EXISTS' as verification FROM pg_user WHERE usename = 'debezium_user';
    SELECT 'Publication: EXISTS' as verification FROM pg_publication WHERE pubname = 'debezium_publication';
    SELECT 'Helper Functions: ' || COUNT(*) as verification FROM pg_proc WHERE proname LIKE 'setup_debezium%';
    \echo '================================='
    \echo 'PostgreSQL is ready for Debezium CDC with any application database'
    \echo 'Use setup_debezium_for_database(''db_name'') after creating new databases'

---
apiVersion: apps/v1
kind: StatefulSet
metadata:
  name: postgres-wal
  labels:
    app: postgres-wal
spec:
  serviceName: "postgres-wal"
  replicas: 1
  selector:
    matchLabels:
      app: postgres-wal
  template:
    metadata:
      labels:
        app: postgres-wal
    spec:
      containers:
      - name: postgres
        image: postgres:16.10-alpine3.22
        ports:
        - containerPort: 5432
          name: postgres
        env:
        - name: POSTGRES_DB
          value: "mydb"
        - name: POSTGRES_USER
          value: "admin"
        - name: POSTGRES_PASSWORD
          value: "password123"  # Change this in production
        - name: PGDATA
          value: "/var/lib/postgresql/data/pgdata"
        args:
        - -c
        - config_file=/etc/postgresql/postgresql.conf
        volumeMounts:
        - name: postgres-data
          mountPath: /var/lib/postgresql/data
        - name: postgres-archive
          mountPath: /var/lib/postgresql/archive
        - name: postgres-config
          mountPath: /etc/postgresql
        - name: init-scripts
          mountPath: /docker-entrypoint-initdb.d
        resources:
          requests:
            memory: "512Mi"
            cpu: "500m"
          limits:
            memory: "1Gi"
            cpu: "1000m"
        livenessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - admin
            - -d
            - mydb
          initialDelaySeconds: 30
          periodSeconds: 10
        readinessProbe:
          exec:
            command:
            - pg_isready
            - -U
            - admin
            - -d
            - mydb
          initialDelaySeconds: 5
          periodSeconds: 5
      volumes:
      - name: postgres-config
        configMap:
          name: postgres-wal-config
      - name: init-scripts
        configMap:
          name: postgres-init-scripts
  volumeClaimTemplates:
  - metadata:
      name: postgres-data
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "local-path"
      resources:
        requests:
          storage: 5Gi
  - metadata:
      name: postgres-archive
    spec:
      accessModes: [ "ReadWriteOnce" ]
      storageClassName: "local-path"
      resources:
        requests:
          storage: 2Gi